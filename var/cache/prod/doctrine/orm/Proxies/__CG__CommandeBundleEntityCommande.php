<?php

namespace Proxies\__CG__\CommandeBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Commande extends \CommandeBundle\Entity\Commande implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'id', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'libelle', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'date', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'paye', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'archive', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'client', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'annee', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'utilisateur', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'acompte', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'dateEvenement', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'partenaire', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'type_evenement'];
        }

        return ['__isInitialized__', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'id', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'libelle', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'date', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'paye', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'archive', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'client', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'annee', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'utilisateur', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'acompte', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'dateEvenement', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'partenaire', '' . "\0" . 'CommandeBundle\\Entity\\Commande' . "\0" . 'type_evenement'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Commande $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLibelle($libelle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLibelle', [$libelle]);

        return parent::setLibelle($libelle);
    }

    /**
     * {@inheritDoc}
     */
    public function getLibelle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLibelle', []);

        return parent::getLibelle();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', [$date]);

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setPaye($paye)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPaye', [$paye]);

        return parent::setPaye($paye);
    }

    /**
     * {@inheritDoc}
     */
    public function getPaye()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPaye', []);

        return parent::getPaye();
    }

    /**
     * {@inheritDoc}
     */
    public function setArchive($archive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArchive', [$archive]);

        return parent::setArchive($archive);
    }

    /**
     * {@inheritDoc}
     */
    public function getArchive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArchive', []);

        return parent::getArchive();
    }

    /**
     * {@inheritDoc}
     */
    public function setClient(\ClientBundle\Entity\Client $client)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClient', [$client]);

        return parent::setClient($client);
    }

    /**
     * {@inheritDoc}
     */
    public function getClient()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClient', []);

        return parent::getClient();
    }

    /**
     * {@inheritDoc}
     */
    public function setAnnee(\CommandeBundle\Entity\Annee $annee)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAnnee', [$annee]);

        return parent::setAnnee($annee);
    }

    /**
     * {@inheritDoc}
     */
    public function getAnnee()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAnnee', []);

        return parent::getAnnee();
    }

    /**
     * {@inheritDoc}
     */
    public function setUtilisateur(\UserBundle\Entity\User $utilisateur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUtilisateur', [$utilisateur]);

        return parent::setUtilisateur($utilisateur);
    }

    /**
     * {@inheritDoc}
     */
    public function getUtilisateur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUtilisateur', []);

        return parent::getUtilisateur();
    }

    /**
     * {@inheritDoc}
     */
    public function setAcompte($acompte)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAcompte', [$acompte]);

        return parent::setAcompte($acompte);
    }

    /**
     * {@inheritDoc}
     */
    public function getAcompte()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAcompte', []);

        return parent::getAcompte();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateEvenement($dateEvenement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateEvenement', [$dateEvenement]);

        return parent::setDateEvenement($dateEvenement);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateEvenement()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateEvenement', []);

        return parent::getDateEvenement();
    }

    /**
     * {@inheritDoc}
     */
    public function setPartenaire(\PartenaireBundle\Entity\Partenaire $partenaire)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPartenaire', [$partenaire]);

        return parent::setPartenaire($partenaire);
    }

    /**
     * {@inheritDoc}
     */
    public function getPartenaire()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPartenaire', []);

        return parent::getPartenaire();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeEvenement($type_evenement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeEvenement', [$type_evenement]);

        return parent::setTypeEvenement($type_evenement);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeEvenement()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeEvenement', []);

        return parent::getTypeEvenement();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
